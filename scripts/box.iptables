#!/system/bin/sh

scripts=`realpath $0`
scripts_dir=`dirname ${scripts}`
. /data/box/settings.ini

ipv6 () {
    if [ "${ipv6}" == "false" ]
    then
        echo 1 > /proc/sys/net/ipv6/conf/lo/disable_ipv6
        echo 1 > /proc/sys/net/ipv6/conf/default/disable_ipv6

        echo 0 > /proc/sys/net/ipv6/conf/all/accept_ra
        echo 0 > /proc/sys/net/ipv6/conf/wlan0/accept_ra

        echo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6
        echo 1 > /proc/sys/net/ipv6/conf/wlan0/disable_ipv6
    else
        echo 0 > /proc/sys/net/ipv6/conf/lo/disable_ipv6
        echo 0 > /proc/sys/net/ipv6/conf/default/disable_ipv6

        echo 1 > /proc/sys/net/ipv6/conf/all/accept_ra
        echo 1 > /proc/sys/net/ipv6/conf/wlan0/accept_ra

        echo 0 > /proc/sys/net/ipv6/conf/all/disable_ipv6
        echo 0 > /proc/sys/net/ipv6/conf/wlan0/disable_ipv6
    fi
}

# "ignore output interface"
if [ -f ${ignore_out} ] ; then
    echo "" >> "${ignore_out}"
    sed -i '/^$/d' "${ignore_out}"
    while read ignore_out_line ; do
        ignore_out_text=(`echo ${ignore_out_line}`)
        for ignore_out_word in ${ignore_out_text[*]} ; do
            ignore_out_list=(${ignore_out_list[*]} ${ignore_out_word})
        done
    done < ${ignore_out}
fi

# "ap interface"
if [ -f ${ap_file} ] ; then
    echo "" >> "${ap_file}"
    sed -i '/^$/d' "${ap_file}"
    while read ap_line ; do
        ap_text=(`echo ${ap_line}`)
        for ap_word in ${ap_text[*]} ; do
            ap_list=(${ap_list[*]} ${ap_word})
        done
    done < ${ap_file}
fi

start_tproxy() {
    ip rule add fwmark ${mark_id} lookup ${mark_id}
    ip route add local default dev lo table ${mark_id}


    ${iptables_wait} -t mangle -N BOX_EXTERNAL
    ${iptables_wait} -t mangle -F BOX_EXTERNAL

    # bypass other if
    # "Notice: Some interface is named with r_ / oem / nm_ / qcom_"
    #          It might need more complicated solution.
    ${iptables_wait} -t mangle -I BOX_EXTERNAL -i rmnet_data+ -j RETURN
    ${iptables_wait} -t mangle -I BOX_EXTERNAL -i ccmni+ -j RETURN

    # "bypass intranet"
    if [ "${box_bin_name}" == "clash" ] ; then
        for subnet in ${reserved_ip[@]} ; do
            ${iptables_wait} -t mangle -A BOX_EXTERNAL -d ${subnet} -j RETURN
        done
    else
        for subnet in ${reserved_ip[@]} ; do
            ${iptables_wait} -t mangle -A BOX_EXTERNAL -d ${subnet} -p udp ! --dport 53 -j RETURN
            ${iptables_wait} -t mangle -A BOX_EXTERNAL -d ${subnet} ! -p udp -j RETURN
        done
    fi
    
    ${iptables_wait} -t mangle -A BOX_EXTERNAL -p tcp -i lo -j TPROXY --on-port ${box_tproxy_port} --tproxy-mark ${mark_id}
    ${iptables_wait} -t mangle -A BOX_EXTERNAL -p udp -i lo -j TPROXY --on-port ${box_tproxy_port} --tproxy-mark ${mark_id}

    # Allow ap interface
    # Notice: Old android device may only have one wlan interface.
    # "Some new android device have multiple wlan interface like wlan0(for internet), wlan1(for AP)."
    for ap in ${ap_list[@]} ; do
        ${iptables_wait} -t mangle -A BOX_EXTERNAL -p tcp -i ${ap} -j TPROXY --on-port ${box_tproxy_port} --tproxy-mark ${mark_id}
        ${iptables_wait} -t mangle -A BOX_EXTERNAL -p udp -i ${ap} -j TPROXY --on-port ${box_tproxy_port} --tproxy-mark ${mark_id}
    done

    ${iptables_wait} -t mangle -I PREROUTING -j BOX_EXTERNAL

    
    ${iptables_wait} -t mangle -N BOX_LOCAL
    ${iptables_wait} -t mangle -F BOX_LOCAL
    
    # "bypass ignored interfaces"
    for ignore in ${ignore_out_list[@]} ; do
        ${iptables_wait} -t mangle -I BOX_LOCAL -o ${ignore} -j RETURN
    done

    # "bypass intranet clash"
    if [ "${box_bin_name}" == "clash" ] ; then
        for subnet in ${reserved_ip[@]} ; do
            ${iptables_wait} -t mangle -A BOX_LOCAL -d ${subnet} -j RETURN
        done
    else
        for subnet in ${reserved_ip[@]} ; do
            ${iptables_wait} -t mangle -A BOX_LOCAL -d ${subnet} -p udp ! --dport 53 -j RETURN
            ${iptables_wait} -t mangle -A BOX_LOCAL -d ${subnet} ! -p udp -j RETURN
        done
    fi

    # "Bypass box itself"
    ${iptables_wait} -t mangle -I BOX_LOCAL -m owner --uid-owner 0 --gid-owner 3005 -j RETURN

    ${iptables_wait} -t mangle -A BOX_LOCAL -m owner ! --uid 0-99999 -j DROP

    if [ "${mode}" = "blacklist" ]
    then
        # "bypass AIDs"
        ${scripts_dir}/box.tool -f
        UIDs=$(cat ${appuid_file} | sort -u)
        for appuid in ${UIDs[@]} ; do
            ${iptables_wait} -t mangle -A BOX_LOCAL -m owner --uid-owner ${appuid} -j RETURN
        done
    fi

#    Bypass AIDs
#    for AID in ${AIDs[@]} ; do
#        ${iptables_wait} -t mangle -A BOX_LOCAL -m owner --uid-owner ${AID} -j RETURN
#    done

    # "Route Everything"
    ${iptables_wait} -t mangle -A BOX_LOCAL -p tcp -j MARK --set-mark ${mark_id}
    ${iptables_wait} -t mangle -A BOX_LOCAL -p udp -j MARK --set-mark ${mark_id}

    ${iptables_wait} -t mangle -I OUTPUT -j BOX_LOCAL

    ${iptables_wait} -t mangle -N DIVERT
    ${iptables_wait} -t mangle -F DIVERT

    ${iptables_wait} -t mangle -A DIVERT -j MARK --set-mark ${mark_id}
    ${iptables_wait} -t mangle -A DIVERT -j ACCEPT

    ${iptables_wait} -t mangle -I PREROUTING -p tcp -m socket -j DIVERT

    # "This rule blocks local access to tproxy-port to prevent traffic loopback."
    ${iptables_wait} -A OUTPUT -d 127.0.0.1 -p tcp -m owner --uid-owner 0 --gid-owner 3005 -m tcp --dport ${box_tproxy_port} -j REJECT

    if [ "${box_bin_name}" == "clash" ] ; then
        ${iptables_wait} -t nat -N box_DNS_EXTERNAL
        ${iptables_wait} -t nat -F box_DNS_EXTERNAL

        ${iptables_wait} -t nat -A box_DNS_EXTERNAL -p udp --dport 53 -j REDIRECT --to-ports ${box_dns_port}

        ${iptables_wait} -t nat -I PREROUTING -j box_DNS_EXTERNAL

        ${iptables_wait} -t nat -N box_DNS_LOCAL
        ${iptables_wait} -t nat -F box_DNS_LOCAL

        ${iptables_wait} -t nat -A box_DNS_LOCAL -m owner --uid-owner 0 --gid-owner 3005 -j RETURN

        ${iptables_wait} -t nat -A box_DNS_LOCAL -p udp --dport 53 -j REDIRECT --to-ports ${box_dns_port}

        ${iptables_wait} -t nat -I OUTPUT -j box_DNS_LOCAL

        # "Fix ICMP (ping), this does not guarantee that the ping result is valid (proxies such as clash do not support forwarding ICMP), "
        # just that it returns a result, "--to-destination" can be set to a reachable address."
        ${iptables_wait} -t nat -I OUTPUT -d ${box_fake_ip_range} -p icmp -j DNAT --to-destination 127.0.0.1
        ${iptables_wait} -t nat -I PREROUTING -d ${box_fake_ip_range} -p icmp -j DNAT --to-destination 127.0.0.1
    fi
}

stop_tproxy() {
    ip rule del fwmark ${mark_id} table ${mark_id}
    ip route del local default dev lo table ${mark_id}

    ${iptables_wait} -t mangle -D PREROUTING -j BOX_EXTERNAL
    
    ${iptables_wait} -t mangle -D PREROUTING -p tcp -m socket -j DIVERT

    ${iptables_wait} -t mangle -D OUTPUT -j BOX_LOCAL

    ${iptables_wait} -t mangle -F BOX_EXTERNAL
    ${iptables_wait} -t mangle -X BOX_EXTERNAL
    
    ${iptables_wait} -t mangle -F BOX_LOCAL
    ${iptables_wait} -t mangle -X BOX_LOCAL
    
    ${iptables_wait} -t mangle -F DIVERT
    ${iptables_wait} -t mangle -X DIVERT

    ${iptables_wait} -D OUTPUT -d 127.0.0.1 -p tcp -m owner --uid-owner 0 --gid-owner 3005 -m tcp --dport ${box_tproxy_port} -j REJECT

    if [ "${box_bin_name}" == "clash" ] ; then
        ${iptables_wait} -t nat -D PREROUTING -j box_DNS_EXTERNAL
    
        ${iptables_wait} -t nat -D OUTPUT -j box_DNS_LOCAL

        ${iptables_wait} -t nat -F box_DNS_EXTERNAL
        ${iptables_wait} -t nat -X box_DNS_EXTERNAL
        
        ${iptables_wait} -t nat -F box_DNS_LOCAL
        ${iptables_wait} -t nat -X box_DNS_LOCAL

        ${iptables_wait} -t nat -D OUTPUT -d ${box_fake_ip_range} -p icmp -j DNAT --to-destination 127.0.0.1
        ${iptables_wait} -t nat -D PREROUTING -d ${box_fake_ip_range} -p icmp -j DNAT --to-destination 127.0.0.1
    fi
}

# . /data/box/scripts/box.tun

stop_tun(){
    ${iptables_wait} -D FORWARD -o ${tun_device} -j ACCEPT
    ${iptables_wait} -D FORWARD -i ${tun_device} -j ACCEPT
        if [ "${ipv6}" = "true" ]
        then
            ${ip6tables_wait} -D FORWARD -o ${tun_device} -j ACCEPT
            ${ip6tables_wait} -D FORWARD -i ${tun_device} -j ACCEPT
        fi
}

start_tun(){
    ${iptables_wait} -I FORWARD -o ${tun_device} -j ACCEPT
    ${iptables_wait} -I FORWARD -i ${tun_device} -j ACCEPT
        if [ "${ipv6}" = "true" ]
        then
            ${ip6tables_wait} -I FORWARD -o ${tun_device} -j ACCEPT
            ${ip6tables_wait} -I FORWARD -i ${tun_device} -j ACCEPT
        fi
}

while getopts ":sk" signal ; do
    case ${signal} in
        s)
           ipv6
           if [ "${box_tun_status}" == "false" ]
           then
               stop_tproxy >> /dev/null 2>&1
               start_tproxy \
               && echo $date_log"info: create iptables transparent proxy rules done." >> ${box_logs_file} || echo $date_log"erro: create iptables transparent proxy rule failed." >> ${box_logs_file}
               echo $date_log"info: tproxy server listening at: [::]:$box_tproxy_port" >> ${box_logs_file}
           else
               stop_tun >> /dev/null 2>&1
               start_tun \
               && echo $date_log"info: create iptables tun rules done." >> ${box_logs_file} || echo $date_log"erro: create iptables tun rule failed." >> ${box_logs_file}
               echo $date_log"info: tun stack listening" >> ${box_logs_file}
           fi
           if [ "${box_bin_name}" == "clash" ] ; then
               ${scripts_dir}/box.tool -v
           fi
           detected_port
           echo $date_log"info: $box_bin_name service is running (PID: `cat ${box_pid_file}`)" >> ${box_logs_file}
           ;;
        k)
           if [ "${box_tun_status}" == "false" ]
           then
              echo $date_log"warn: cleaning up iptables transparent proxy rules." >> ${box_logs_file}
              stop_tproxy \
              && echo $date_log"warn: clean up iptables transparent proxy rules done." >> ${box_logs_file} || $date_log"warn: clean up iptables transparent proxy rule failed."itu >> ${box_logs_file}
           else
              stop_tun \
              && echo $date_log"warn: clean up iptables tun rules done." >> ${box_logs_file} || $date_log"warn: clean up iptables tun rule failed."itu >> ${box_logs_file}
           fi
          ;;
        ?)
           echo ""
          ;;
    esac
done